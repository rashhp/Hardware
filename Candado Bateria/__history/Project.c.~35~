#include <18F4550.h>
#fuses HSPLL, PLL5, USBDIV, NOWDT, CPUDIV1, NOPROTECT, NODEBUG, NOPBADEN, NOLVP, NOVREGEN
#use delay(clock = 48MHz)
#define LCD_DATA_PORT getenv("SFR:PORTB")
#include <lcd.c>
#include "KBD4x4.c"

// Calibración
float calibracion = 5.0; // Ajustar según la referencia de voltaje

float leer_voltaje() {
    int16 valor = read_adc(); // Leer ADC
    return (valor * calibracion * 5.0) / 1023.0; // Convertir a voltaje
}

void mostrar_menu(int dir) {
    // Mostrar las opciones del menú en las líneas 1 y 2
    lcd_gotoxy(1, 1);
    lcd_putc("PASSWORD");
    
    lcd_gotoxy(1, 2);
    lcd_putc("BATERIA");

    // Mostrar el indicador "<--" según la opción seleccionada
    if (dir == 0) {
        lcd_gotoxy(1, 1); // Colocar el indicador en la opción "PASSWORD"
        lcd_putc("<--PASSWORD");
    } else if (dir == 1) {
        lcd_gotoxy(1, 9); // Colocar el indicador en la opción "BATERIA"
        lcd_putc("<--BATERIA");
    }
}

void ingresar_password() {
    char tecla;
    char Password[4];
    int dir = 0;

    lcd_gotoxy(1, 1);
    lcd_putc("INGRESE PASSWORD: ");
    lcd_gotoxy(1, 2);
    dir = 0; // Reiniciar el índice para el nuevo intento

    while (dir < 4) {
        tecla = kbd_getc();
        if (tecla != 0) {
            Password[dir] = tecla;
            lcd_putc('*'); // Mostrar '*' en lugar del carácter
            delay_ms(50);
            dir++;
        }
    }

    // Verificar las contraseñas
    if (Password[0] == '1' && Password[1] == '2' && Password[2] == '3' && Password[3] == '4') {
        lcd_gotoxy(1, 1);
        lcd_putc("VERDE           ");
        output_high(PIN_C0); // Encender C0
        delay_ms(300); // Esperar 10 segundos
        output_low(PIN_C0);
    } 
    else if (Password[0] == '4' && Password[1] == '3' && Password[2] == '2' && Password[3] == '1') {
        lcd_gotoxy(1, 1);
        lcd_putc("AZUL            ");
        output_high(PIN_C1); // Encender C1
        delay_ms(300); // Esperar 10 segundos
        output_low(PIN_C1);
    }
    else if (Password[0] == '5' && Password[1] == '6' && Password[2] == '7' && Password[3] == '8') {
        lcd_gotoxy(1, 1);
        lcd_putc("NARANJA         ");
        output_high(PIN_C2); // Encender C2
        delay_ms(300); // Esperar 10 segundos
        output_low(PIN_C2);
    } 
    else if (Password[0] == '8' && Password[1] == '7' && Password[2] == '6' && Password[3] == '5') {
        lcd_gotoxy(1, 1);
        lcd_putc("ROSA            ");
        output_high(PIN_C4); // Encender C4
        delay_ms(300); // Esperar 10 segundos
        output_low(PIN_C4);
    } 
    else {
        lcd_gotoxy(1, 1);
        lcd_putc("ERROR           ");
        delay_ms(200); // Esperar 2 segundos
    }

    // Regresar al menú principal
    mostrar_menu(0);
}

void mostrar_bateria() {
    float voltaje = leer_voltaje(); // Leer el voltaje
    int porcentaje = (voltaje / 5.0) * 100; // Calcular el porcentaje de batería

    lcd_gotoxy(1, 1);
    lcd_putc("BATERIA: ");
    lcd_gotoxy(1, 2);
    printf(lcd_putc, "%d%%", porcentaje); // Mostrar el porcentaje en el LCD

    delay_ms(2000); // Esperar 2 segundos

    // Regresar al menú principal
    mostrar_menu(0);
}

void main(void) {
    int dir = 0;
    char boton;

    // Configurar puertos
    set_tris_E(0x03); // RE0 y RE1 como entradas (botones)
    set_tris_A(0xFF); // RA0 como entrada (potenciómetro)
    set_tris_D(0x00); // RD como salidas (LCD)
    
    lcd_init();       // Inicializar el LCD

    // Inicializar ADC
    setup_adc(ADC_CLOCK_DIV_2);  // Configura la frecuencia del ADC
    setup_adc_ports(AN0); // Configura RA0 como entrada analógica

    mostrar_menu(dir);  // Mostrar el menú principal

    while (true) {
        // Leer los botones RE0 y RE1
        boton = input(PIN_E0); // Botón de dirección (RE0)
        if (boton == 0) { // Si el botón está presionado
            dir = (dir == 0) ? 1 : 0; // Cambiar de opción
            delay_ms(300); // Debounce
            mostrar_menu(dir); // Actualizar la pantalla
        }

        boton = input(PIN_E1); // Botón de selección (RE1)
        if (boton == 0) { // Si el botón está presionado
            if (dir == 0) {
                ingresar_password(); // Ingresar contraseña
            } else if (dir == 1) {
                mostrar_bateria(); // Mostrar el estado de la batería
            }
            delay_ms(300); // Debounce
        }
    }
}

