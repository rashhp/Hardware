#include <18F4550.h>
#fuses HS,NOLVP // Configuración del oscilador y programación
#use delay(clock=4000000)
#include <lcd.c>

// Prototipos de funciones
void lcd_init();
void lcd_command(unsigned char cmd);
void lcd_data(unsigned char data);
void lcd_print(const char *str);

void main() {
    float voltaje;
    int16 valor;
    float calibracion = 4.0; // Ajusta este valor para calibrar la lectura

    // Configurar puertos
    set_tris_A(0xFF); // RA0 como entrada (potenciómetro)
    set_tris_D(0x00); // RD como salidas (LCD)
    lcd_init();       // Inicializar el LCD

    // Inicializar ADC
    setup_adc(ADC_CLOCK_DIV_2);  // Configura la frecuencia del ADC
    setup_adc_ports(AN0); // Configura RA0 como entrada analógica

    // Mensaje inicial en el LCD
    lcd_gotoxy(1, 1);
    printf(lcd_putc, "VOLTAJE:  ");

    while (true) {
        // Leer el valor del ADC
        valor = read_adc(); // Leer ADC de RA0

        // Convertir el valor a voltaje con calibración
        voltaje = (valor * calibracion * 5.0) / 1023.0; // Ajustar según la calibración

        // Mostrar el voltaje en el LCD
        lcd_gotoxy(1, 2); // Ir a la segunda línea
        printf(lcd_putc, "%.2f V       ", voltaje); // Mostrar el voltaje con dos decimales

        delay_ms(500); // Esperar medio segundo antes de la siguiente lectura
    }
}

void lcd_init() {
    delay_ms(20); // Espera para inicializar el LCD
    lcd_command(0x38); // Configura el LCD en modo de 8 bits
    lcd_command(0x0C); // Enciende el display
    lcd_command(0x01); // Limpia el display
    lcd_command(0x06); // Mueve el cursor a la derecha
}

void lcd_command(unsigned char cmd) {
    PORTD = cmd; // Enviar comando al LCD
    PORTD.RD0 = 0; // RS = 0 para comando
    PORTD.RD1 = 1; // E = 1 para habilitar
    delay_ms(1);
    PORTD.RD1 = 0; // E = 0
    delay_ms(2);
}

void lcd_data(unsigned char data) {
    PORTD = data; // Enviar datos al LCD
    PORTD.RD0 = 1; // RS = 1 para datos
    PORTD.RD1 = 1; // E = 1 para habilitar
    delay_ms(1);
    PORTD.RD1 = 0; // E = 0
    delay_ms(2);
}

