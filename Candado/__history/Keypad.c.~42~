#include <18F4550.H>
#fuses HSPLL, PLL5, USBDIV, NOWDT, CPUDIV1, NOPROTECT, NODEBUG, NOPBADEN, NOLVP, NOVREGEN
#use delay(clock = 4000000)
#define LCD_DATA_PORT getenv("SFR:PORTB")
#include <lcd.c>

// Prototipos de funciones para el teclado
void kbd_init();
char kbd_getc();

// Definiciones de teclado
#define COL0 (1 << 4)
#define COL1 (1 << 5)
#define COL2 (1 << 6)
#define COL3 (1 << 7)

#define ROW0 (1 << 0)
#define ROW1 (1 << 1)
#define ROW2 (1 << 2)
#define ROW3 (1 << 3)

#define ALL_ROWS (ROW0|ROW1|ROW2|ROW3)
#define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3)

char const KEYS[4][4] = {{'1','2','3','A'},
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

#define KBD_DEBOUNCE_FACTOR 33

void kbd_init() {
    // Inicialización del teclado, si es necesario
}

char kbd_getc() {
    static BYTE kbd_call_count;
    static int1 kbd_down;
    static char last_key;
    static BYTE col;

    BYTE kchar;
    BYTE row;

    kchar = '\0';
    if (++kbd_call_count > KBD_DEBOUNCE_FACTOR) {
        switch (col) {
            case 0: set_tris_kbd(ALL_PINS & ~COL0);
                    break;
            case 1: set_tris_kbd(ALL_PINS & ~COL1);
                    break;
            case 2: set_tris_kbd(ALL_PINS & ~COL2);
                    break;
            case 3: set_tris_kbd(ALL_PINS & ~COL3);
                    break;
        }

        if (kbd_down) {
            if ((kbd & (ALL_ROWS)) == (ALL_ROWS)) {
                kbd_down = FALSE;
                kchar = last_key;
                last_key = '\0';
            }
        } else {
            if ((kbd & (ALL_ROWS)) != (ALL_ROWS)) {
                if ((kbd & ROW0) == 0) row = 0;
                else if ((kbd & ROW1) == 0) row = 1;
                else if ((kbd & ROW2) == 0) row = 2;
                else if ((kbd & ROW3) == 0) row = 3;
                last_key = KEYS[row][col];
                kbd_down = TRUE;
            } else {
                ++col;
                if (col == 4) col = 0;
            }
        }
        kbd_call_count = 0;
    }
    set_tris_kbd(ALL_PINS);
    return (kchar);
}

void main() {
    set_tris_D(0xFF); // D como entradas para el teclado
    set_tris_B(0x00); // B como salidas para el LCD
    char tecla;
    
    lcd_init();
    kbd_init();
    output_B(0x00);

    lcd_gotoxy(1, 1);
    printf(lcd_putc, "Presiona Tecla");

    while (true) {
        tecla = kbd_getc(); // Leer tecla
        if (tecla != 0) { // Si se presionó una tecla
            lcd_gotoxy(1, 2); // Mover a la segunda línea
            lcd_putc(tecla); // Mostrar la tecla
            delay_ms(200); // Antirrebote
        }
    }
}

